
R Under development (unstable) (2015-01-18 r67517) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> rm(list=ls())
> 
> args <- commandArgs(TRUE)
> la <- length(args)
> if (la > 0){
+   for (i in 1:la)
+     eval(parse(text=args[[i]]))
+ }
> 
> 
> ###################################################################
> ##
> ## Peak filtering 
> ##
> ###################################################################
> source("scripts/polyA_lib.R")
> 
> require(RColorBrewer)
Le chargement a nécessité le package : RColorBrewer
> require(GenomicRanges)
Le chargement a nécessité le package : GenomicRanges
Le chargement a nécessité le package : BiocGenerics
Le chargement a nécessité le package : parallel

Attachement du package : ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    do.call, duplicated, eval, evalq, Filter, Find, get, intersect,
    is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax,
    pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rep.int,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unlist, unsplit

Le chargement a nécessité le package : S4Vectors
Le chargement a nécessité le package : stats4
Le chargement a nécessité le package : IRanges
Le chargement a nécessité le package : GenomeInfoDb
> require(rtracklayer)
Le chargement a nécessité le package : rtracklayer
> 
> ## Import peaks as GRanges object
> message("Import peaks file ...")
Import peaks file ...
> pois <- import(peakfile)
> names(pois) <- pois$name
> 
> chrname <- seqlevels(pois)
> if (is.element("chrMT",  chrname)){
+   chrname[which(chrname=="chrMT")] <- "chrM"
+   seqlevels(pois) <- chrname
+ }
> 
> message(length(pois)," loaded")
48152 loaded
> 
> ## Remove peaks which overlap several consecutive exons
> message("Discard peaks which are not in last exons nor in intronic regions ...")
Discard peaks which are not in last exons nor in intronic regions ...
> 
> ## ele
> ele.gr <- loadAnnotData(ELEAnnotFile)
Loading annotation file 'annotation/mm9/whole_gene_wo_last_exon.bed' ...
> 
> ## le
> le.gr <- loadAnnotData(LEAnnotFile)
Loading annotation file 'annotation/mm9/last_exon_gene.bed' ...
> is_le <- filterPeaksOnAnnotation(pois, le.gr, minoverlap=as.numeric(le_overlap))
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> 
> ## intron
> exons.gr <- loadAnnotData(TRSAnnotFile)
Loading annotation file 'annotation/mm9/transcriptsType.bed' ...
> is_intron<- filterPeaksOnAnnotation(pois, exons.gr, invert=TRUE,  minoverlap=as.numeric(intron_overlap))
Invert Annotation ...
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> 
> finalpeaks <- unique(c(is_le$name, is_intron$name))
> pois.filt <- pois[finalpeaks]
> 
> message("Discarded peaks=", length(pois)-length(pois.filt))
Discarded peaks=16585
> message("Peaks of interest=",length(pois.filt))
Peaks of interest=31567
> 
> ## Export list of peaks
> message("Export results ...")
Export results ...
> outfile <- sub(".bed$", "_notlastexons_notintron.bed", peakfile)
> export(pois[setdiff(pois$name, pois.filt$name)], con=outfile)
> 
> outfile <- sub(".bed$", "_finallist.bed", peakfile)
> export(pois.filt, format="bed", con=outfile)
> 
> ## Load annotation
> message("Annotate Peaks ...")
Annotate Peaks ...
> message("Minimum Overlap = ",minover)
Minimum Overlap = 1
> 
> pois.le.nr <- annotatePeaks(pois.filt, le.gr[grep("NR",le.gr$nm)], outfile=sub(".bed$", "_NR_LE_annot.bed", peakfile), minover=as.numeric(minover))
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> pois.le.nm <- annotatePeaks(pois.filt, le.gr[grep("NM",le.gr$nm)],  outfile=sub(".bed$", "_NM_LE_annot.bed", peakfile), minover=as.numeric(minover))
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> pois.ele.nr <- annotatePeaks(pois.filt, ele.gr[grep("NR",ele.gr$nm)], outfile=sub(".bed$", "_NR_ELE_annot.bed", peakfile), minover=as.numeric(minover))
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> pois.ele.nm <- annotatePeaks(pois.filt, ele.gr[grep("NM",ele.gr$nm)], outfile=sub(".bed$", "_NM_ELE_annot.bed", peakfile), minover=as.numeric(minover))
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': chrM
  - in 'y': chrY
  Make sure to always combine/compare objects based on the same reference
  genome (use suppressWarnings() to suppress this warning).
> 
> 
> ## Combine Annotation
> ov <- as.list(findOverlaps(subject=pois.le.nm,query=pois.filt,type="equal",select="all"))
> x.index <- which(sapply(ov, length)!=0)
> pois.filt$name = ""
> pois.filt$status = ""
> pois.filt$name[x.index] <-   pois.le.nm$name
> pois.filt$status[x.index] <- "LE"
> 
> ov <- as.list(findOverlaps(subject=pois.le.nr,query=pois.filt,type="equal",select="all"))
> x.index <- which(sapply(ov, length)!=0)
> pois.filt$name[x.index] <- paste(pois.le.nr$name, pois.filt$name[x.index],sep="|")
> pois.filt$status[x.index] <- paste("LE", pois.filt$status[x.index],sep="|")
> 
> ov <- as.list(findOverlaps(subject=pois.ele.nm,query=pois.filt,type="equal",select="all"))
> x.index <- which(sapply(ov, length)!=0)
> pois.filt$name[x.index] <- paste0(pois.ele.nm$name, pois.filt$name[x.index],sep="|")
> pois.filt$status[x.index] <- paste("ELE", pois.filt$status[x.index],sep="|")
> 
> ov <- as.list(findOverlaps(subject=pois.ele.nr,query=pois.filt,type="equal",select="all"))
> x.index <- which(sapply(ov, length)!=0)
> pois.filt$name[x.index] <- paste0(pois.ele.nr$name, pois.filt$name[x.index],sep="|")
> pois.filt$status[x.index] <- paste("ELE", pois.filt$status[x.index],sep="|")
> 
> outfile=sub(".bed$", "_finallist_annot.tsv", peakfile)
> write.table(as.data.frame(pois.filt), file=outfile,quote=FALSE,row.names=FALSE, sep="\t")
> 
> 
> proc.time()
utilisateur     système      écoulé 
     44.250       0.440      45.671 
